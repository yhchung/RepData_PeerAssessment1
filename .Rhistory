exit
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(50)
x <- (1:10)
x <- (1:100)
x
e <- rnorm(100, 0, 1)
y <- 1.5 - 3 * x + e
summary(y)
plot (x, y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x ,y)
x
set.seed(100)
y <- 0.5 + 2*x + e
set.seed(100)
plot(x ,y)
sample(1:10)
sample(1:10, replace = T
)
sample(1:10, replace = T)
sample(1:10, replace = TRUE)
sample(LETTERS, 5)
sample(Letters, 5)
511+583+511+558+540+511
3214/6
583+655+583+630+583+583
3617/6
56348 * 1.3
args(rnorm)
args (rnorm)
heights = rnorm (10, mean = 188, sd = 3)
heights
args (rbinom)
coinFlips = rbinom(10, size=10, prob=0.5)
coinFlips = rbinom(10, size=10, prob=0.5)
coinFlips
args (rnorm)
heights = rnorm (10, mean = 188, sd = 3)
heights
args (rbinom)
coinFlips = rbinom(10, size=10, prob=0.5)
coinFlips
args(dnorm)
x = seq( from = -5, to = 5, length = 10)
normalDensity = dnrom (x, mean = 0, sd = 1)
normalDensity = dnorm (x, mean = 0, sd = 1)
source('~/.active-rstudio-document', echo=TRUE)
args(dbinom)
x = seq(0, 10, by = 1)
binomialDensity = dbinom(x, size = 10, prob = 0.5)
round(binomialDensity, 2)
args(dbinom)
x = seq(0, 10, by = 1)
seed(2)
binomialDensity = dbinom(x, size = 10, prob = 0.5)
round(binomialDensity, 2)
heights
sum(probs)
sample(heights, size = 10, replace=TRUE)
probs = c(0.4, 0.3, 0.2, 0.1, 0.1, 0, 0, 0, 0, 0)
sum(probs)
sample(heights, size = 10, replace=TRUE, prob = probs)
round(heights, 2)
sample(heights, size = 10, replace=TRUE)
probs = c(0.4, 0.3, 0.2, 0.1, 0.1, 0, 0, 0, 0, 0)
sum(probs)
sample(heights, size = 10, replace=TRUE, prob = probs)
set.seed(12345)
round(heights, 2)
sample(heights, size = 10, replace=TRUE)
probs = c(0.4, 0.3, 0.2, 0.1, 0.1, 0, 0, 0, 0, 0)
sum(probs)
sample(heights, size = 10, replace=TRUE, prob = probs)
set.seed(12345)
round(heights, 2)
sample(heights, size = 10, replace=TRUE)
probs = c(0.4, 0.3, 0.2, 0.1, 0.1, 0, 0, 0, 0, 0)
sum(probs)
sample(heights, size = 10, replace=TRUE, prob = probs)
?pnorm
?dpois
dpois(x, 10)
plot(x)
dpois(x, 20)
plot(x)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrame
set.seed(31);
heightsCM <- rnorm(30,mean=188, sd=5);
weightsK <- rnorm(30,mean=84,sd=3);
hasDaughter <- sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame <- data.frame(heightsCM,weightsK,hasDaughter);
dataFrame
dataFrameSubset <- subset(dataFrame, dataFrame$heightsCM > 188)
dataFrameSubset
mean(dataFrameSubset$weightsK)
set.seed(31);
heightsCM <- rnorm(30,mean=188, sd=5);
weightsK <- rnorm(30,mean=84,sd=3);
hasDaughter <- sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame <- data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset <- subset(dataFrame, dataFrame$heightsCM > 188)
mean(dataFrameSubset$weightsK)
set.seed(41)
cauchyValues <- rcauchy(100)
cauchyValues
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
sample(cauchyValues, size = 10, replace = TRUE)
set.seed(31)
heightsCM <- rnorm(30,mean=188, sd=5)
weightsK <- rnorm(30,mean=84,sd=3)
hasDaughter <- sample(c(TRUE,FALSE),size=30,replace=T)
dataFrame <- data.frame(heightsCM,weightsK,hasDaughter)
dataFrameSubset <- subset(dataFrame, dataFrame$heightsCM > 188)
mean(dataFrameSubset$weightsK)
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
sample(cauchyValues, size = 10, replace = TRUE)
library(kernlab)
?install
?install()
install.packages("kernlab")
library(kernlab)
data(spam)
dim(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
am[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
dim(trainSpam)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
dim(trainSpam)
names(trainSpam)
summary(trainSpam)
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:57]+1))))
plot(hClusterUpdated)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
378/3
37800/45000
1089400/75000
4500/200
4500/50
22.5*2
2/22.5
40/90
32*32*16*16
16*16
32*32
8*4*2*16*16
180000*0.75
180000*0.85
180000*0.90
180000*0.95
16.5 * 20
792 *0.3
2100+ 630+ 6000+6000+6000
20730/700
30130/4
301/4
20730/6
37*4
148+26
37*4 + 24
37*3 + 24
37*5 + 21
37*3 + 15
37*5 + 17
23*26
600*0.027
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset = dataFrame[heightsCM < 190, ]
dataFrameSubset = dataFrame[heightsCM > 188, ]
mean(dataFrameSubset$weightsK)
set.seed(41)
rcauchy(100, location = 0, scale = 1)
help cauchy
cauchy?
d
set.seed(41)
cauchyValues = rcauchy(100, location = 0, scale = 1)
??rvcauchy
set.seed(41)
cauchyValues = rcauchy(100, location = 0, scale = 1)
set.seed(415)
sampling <- sample(cauchyValues, replace = T)
sampling
??sample
?sample
sampling <- sample(size = 10, cauchyValues, replace = T)
sampling
set.seed(365)
cauchyValues = rcauchy(100, location = 0, scale = 1)
set.seed(999)
sampling <- sample(size = 10, cauchyValues, replace = T)
sampling
set.seed(41)
cauchyValues = rcauchy(100, location = 0, scale = 1)
set.seed(415)
sampling <- sample(size = 10, cauchyValues, replace = T)
sampling
set.seed(41)
cauchyValues = rcauchy(100, location = 0, scale = 1)
set.seed(415)
sampling <- sample(size = 10, cauchyValues, replace = T)
sampling
#download.file("https://dl.dropbox.com/u/7710864/courseraPublic/samsungData.rda", destfile="./data/samsungData.rda",method="curl")
install.packages("RMySQL")
uscsDB <- dbConnect(MySQL(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(uscsDB);
library("RMySQL")
uscsDB <- dbConnect(MySQL(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(uscsDB);
library("DBI")
uscsDB <- dbConnect(MySQL(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(uscsDB);
ucscDB <- dbConnect(MySQL(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(uscsDB);
result
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19"
host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
dbDisconnect(uscsDB);
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19",
host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
dbDisconnect(uscsDB);
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResault(query);
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
bioLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("exampleh5")
created
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
A
B
df = data.frame(1L:5L, seq(0, 1, length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
df
read5 = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA = h5read("example.h5", "foo/A")
readA
readdf
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
h5read("example.h5", "foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAA&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
head(htmlCode)
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
install.packages(XML)
install.packages("XML")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
install.packages("httr")
library(httr); html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
?help
?version
R.Version()
sdf
?elt
install.packages("knitr")
install.packages("slidify")
r version
```{r}
set.seed(1)
x <- rnorm(100)
mean(x)
install.packages("xtable")
setwd("~/Dropbox/Online_Course/BigDataTrack/Reproducible/Project1")
data <- read.csv("./data/activity.csv")
summary(data)
head(data)
str(data)
setwd("~/Dropbox/_GitHub/RepData_PeerAssessment1")
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "activity.csv"))
unlink(temp)
?downlaod
?download
?download.file
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp
, method = "curl")
```{r}
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp
, method = "curl")
data <- read.table(unz(temp, "activity.csv"))
unlink(temp)
head(temp)
head(data)
unz
?unz
data <- read.csv(unz(download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp, method = "curl")))
data <- read.csv(unz(download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp, method = "curl")), "activity.csv")
data <- read.csv(unz(download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp, method = "curl"), "activity.csv"))
data <- read.csv(unz(download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", method = "curl"), "activity.csv"))
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
summary(data)
summary(data)
str(data)
data[, 2] <- data[, 2]
?strptime
data[, 2] <- strptime(data[, 2], "%Y-%m-%d"
data[, 2] <- strptime(data[, 2], "%Y-%m-%d")
head(data)
summary(data)
str(data)
data$date <- strptime(data$date, "%Y-%m-%d")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
data$date <- strptime(data$date, "%Y-%m-%d")
?aggregate
hist(aggregate(steps ~ date, data, sum)$steps)
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
hist(aggregate(steps ~ date, data, sum)$steps)
steps_per_day <- aggregate(steps ~ date, data, sum)$date
hist(aggregate(steps ~ date, data, sum)$steps)
hist(steps_per_day)
steps_per_day <- aggregate(steps ~ date, data, sum)$date
hist(steps_per_day)
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
hist(steps_per_day)
?aggregate
data$date <- strptime(data$date, "%Y-%m-%d")
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
?plyr
install.package("plyr")
install.packages("plyr")
?plyr
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
?hist(steps_per_day)
hist(steps_per_day)
hist(steps_per_day,
main = "The total number of steps taken per day",
xlim = "Steps",
ylim = "Frequency")
hist(steps_per_day,
main = "The total number of steps taken per day",
xlab = "Steps", ylab = "Frequency")
hist(steps_per_day,
main = "The total number of steps taken per day",
xlab = "Steps", ylab = "Frequency (day)")
mean <- mean(steps_per_day)
mean
{r mean} and {r median}
mean
median
The mean of the total number of steps is `r mean` and the median is `r median`.
median <- median(steps_per_day)
median
steps_by_interval <- aggregate(steps ~ interval, data, mean)
steps_by_interval <- aggregate(steps ~ interval, data, mean)
steps_by_interval <- aggregate(steps ~ interval, data, mean)
plot(steps_by_interval$steps, type = "l",
main = "Average daily activity pattern",
xlab = "5-min interval", ylab = "Averaged number of steps per interval")
max.interval = which.max(steps_by_interval$steps)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
hist(steps_per_day,
main = "The total number of steps taken per day",
xlab = "Steps", ylab = "Frequency (day)")
steps.mean <- mean(steps_per_day)
steps.median <- median(steps_per_day)
steps_by_interval <- aggregate(steps ~ interval, data, mean)
plot(steps_by_interval$steps, type = "l",
main = "Average daily activity pattern",
xlab = "5-min interval", ylab = "Averaged number of steps per interval")
steps_by_interval <- aggregate(steps ~ interval, data, mean)
steps_by_interval <- aggregate(steps ~ interval, data, mean)$steps
steps_by_interval <- aggregate(steps ~ interval, data, mean)
plot(steps_by_interval$steps, type = "l",
main = "Average daily activity pattern",
xlab = "5-min interval", ylab = "Averaged number of steps per interval")
steps_by_interval <- aggregate(steps ~ interval, data, mean)
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
steps_by_interval <- aggregate(steps ~ interval, data, mean)
steps_by_interval <- aggregate(steps ~ interval, data, sum)
?aggregate
steps_by_interval <- aggregate(steps ~ interval, data, FUN = mean)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
steps_per_day <- aggregate(steps ~ date, data, sum)$steps
hist(steps_per_day,
main = "The total number of steps taken per day",
xlab = "Steps", ylab = "Frequency (day)")
steps.mean <- mean(steps_per_day)
steps.median <- median(steps_per_day)
steps_by_interval <- aggregate(steps ~ interval, data, mean)
plot(steps_by_interval$steps, type = "l",
main = "Average daily activity pattern",
xlab = "5-min interval", ylab = "Averaged number of steps per interval")
max.interval = which.max(steps_by_interval$steps)
max.interval
max.interval = which.max(steps_by_interval$steps)
max.interval
interval[max.interval]
data$interval[max.interval]
max.interval = which.max(steps_by_interval$steps)
max.interval = which.max(steps_by_interval$interval)
max.interval
data$interval[max.interval]
tail(data)
sum(is.na(steps))
sum(is.na(data))
max.interval = which.max(steps_by_interval$steps)
max.interval
